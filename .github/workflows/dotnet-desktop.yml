name: .NET Core Desktop

on:
  push:
    tags:
      - 'v*'

jobs:

  build:
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      Solution_Name: SinglePass.WPF.sln
      Project_Path: .\SinglePass.WPF\SinglePass.WPF.csproj
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
        
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore
      run: |
       msbuild $env:Project_Path /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: Release

    # Build the application to populate the bin folder
    - name: Build
      run: |
       msbuild $env:Project_Path /t:Publish /p:Configuration=$env:Configuration /p:RuntimeIdentifier=win-x64 /p:SelfContained=true /p:PublishReadyToRun=True /p:PublishSingleFile=true
      env:
        Configuration: Release
    
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build result
        path: .\SinglePass.WPF\bin\Release\net7.0-windows\win-x64\publish\

  publish:
    runs-on: ubuntu-latest
    steps:
    - name: "Determine tag"
      if: "${{ github.event_name }} == 'push' && ${{ github.ref_type }} == 'tag'"
      run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"
      shell: "bash"

    - name: "Create release"
      uses: "actions/github-script@v6.4.0"
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |
          if (!process.env.RELEASE_TAG) {
            core.setFailed("The environment variable RELEASE_TAG is not defined.")
            return;
          }
          try {
            const response = await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: process.env.RELEASE_TAG,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: process.env.RELEASE_TAG,
            });
            core.exportVariable('RELEASE_ID', response.data.id);
            core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
          } catch (error) {
            core.setFailed(error.message);
          }